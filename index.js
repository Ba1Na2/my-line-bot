'use strict';

const express = require('express');
const line = require('@line/bot-sdk');
const firebase = require('firebase-admin');
const { Client } = require("@googlemaps/google-maps-services-js");
const dialogflow = require('@google-cloud/dialogflow');
const { v4: uuidv4 } = require('uuid');

require('dotenv').config();

// ----- 1. INITIALIZE SERVICES -----
const config = {
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
    channelSecret: process.env.CHANNEL_SECRET,
};
const client = new line.Client(config);

const serviceAccount = require('./serviceAccountKey.json');
if (firebase.apps.length === 0) {
    firebase.initializeApp({
        credential: firebase.credential.cert(serviceAccount)
    });
}
const db = firebase.firestore();

const googleMapsClient = new Client({});

const DIALOGFLOW_PROJECT_ID = 'linebot-mrt'; // <<< ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô Project ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const DIALOGFLOW_KEY_FILE = './dialogflow-key.json';
const sessionClient = new dialogflow.SessionsClient({
    keyFilename: DIALOGFLOW_KEY_FILE
});

const app = express();
app.use(express.static('public'));


// ----- 2. DATA & HELPER FUNCTIONS -----
const MRT_BLUE_LINE_STATIONS = {
    "‡∏´‡∏±‡∏ß‡∏•‡∏≥‡πÇ‡∏û‡∏á": {"lat": 13.739186, "lng": 100.516893},
    "‡∏™‡∏≤‡∏°‡∏¢‡πà‡∏≤‡∏ô": {"lat": 13.732952, "lng": 100.529431},
    "‡∏™‡∏µ‡∏•‡∏°": {"lat": 13.729908, "lng": 100.535898},
    "‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ": {"lat": 13.729172, "lng": 100.546305},
    "‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢": {"lat": 13.723912, "lng": 100.556276},
    "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡∏™‡∏¥‡∏£‡∏¥‡∏Å‡∏¥‡∏ï‡∏¥‡πå": {"lat": 13.722881, "lng": 100.561587},
    "‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó": {"lat": 13.738012, "lng": 100.561081},
    "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ": {"lat": 13.750873, "lng": 100.561919},
    "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 9": {"lat": 13.758031, "lng": 100.565439},
    "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢": {"lat": 13.765664, "lng": 100.569106},
    "‡∏´‡πâ‡∏ß‡∏¢‡∏Ç‡∏ß‡∏≤‡∏á": {"lat": 13.778844, "lng": 100.574633},
    "‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏™‡∏≤‡∏£": {"lat": 13.789233, "lng": 100.574784},
    "‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å": {"lat": 13.797274, "lng": 100.575647},
    "‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß": {"lat": 13.806659, "lng": 100.576899},
    "‡∏û‡∏´‡∏•‡πÇ‡∏¢‡∏ò‡∏¥‡∏ô": {"lat": 13.815779, "lng": 100.562144},
    "‡∏™‡∏ß‡∏ô‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£": {"lat": 13.822295, "lng": 100.552278},
    "‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£": {"lat": 13.824706, "lng": 100.548481},
    "‡∏ö‡∏≤‡∏á‡∏ã‡∏∑‡πà‡∏≠": {"lat": 13.803362, "lng": 100.535032},
    "‡πÄ‡∏ï‡∏≤‡∏õ‡∏π‡∏ô": {"lat": 13.806306, "lng": 100.529450}, 
    "‡∏ö‡∏≤‡∏á‡πÇ‡∏û": {"lat": 13.811808, "lng": 100.521833},
    "‡∏ö‡∏≤‡∏á‡∏≠‡πâ‡∏≠": {"lat": 13.805565, "lng": 100.512686},
    "‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏±‡∏î": {"lat": 13.790588, "lng": 100.506541},
    "‡∏™‡∏¥‡∏£‡∏¥‡∏ô‡∏ò‡∏£": {"lat": 13.782017, "lng": 100.493922},
    "‡∏ö‡∏≤‡∏á‡∏¢‡∏µ‡πà‡∏Ç‡∏±‡∏ô": {"lat": 13.771146, "lng": 100.488390},
    "‡∏ö‡∏≤‡∏á‡∏Ç‡∏∏‡∏ô‡∏ô‡∏ô‡∏ó‡πå": {"lat": 13.764491, "lng": 100.477085},
    "‡πÑ‡∏ü‡∏â‡∏≤‡∏¢": {"lat": 13.757352, "lng": 100.469033},
    "‡∏à‡∏£‡∏±‡∏ç‡∏Ø 13": {"lat": 13.751325, "lng": 100.470724},
    "‡∏ó‡πà‡∏≤‡∏û‡∏£‡∏∞": {"lat": 13.743015, "lng": 100.472280}, 
    "‡∏ö‡∏≤‡∏á‡πÑ‡∏ú‡πà": {"lat": 13.734685, "lng": 100.468841},
    "‡∏ö‡∏≤‡∏á‡∏´‡∏ß‡πâ‡∏≤": {"lat": 13.723824, "lng": 100.460144}, 
    "‡πÄ‡∏û‡∏ä‡∏£‡πÄ‡∏Å‡∏©‡∏° 48": {"lat": 13.722686, "lng": 100.444747},
    "‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏à‡∏£‡∏¥‡∏ç": {"lat": 13.719601, "lng": 100.434440},
    "‡∏ö‡∏≤‡∏á‡πÅ‡∏Ñ": {"lat": 13.715367, "lng": 100.418041},
    "‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≠‡∏á": {"lat": 13.710784, "lng": 100.406103},
    "‡∏ß‡∏±‡∏î‡∏°‡∏±‡∏á‡∏Å‡∏£": {"lat": 13.743734, "lng": 100.509747},
    "‡∏™‡∏≤‡∏°‡∏¢‡∏≠‡∏î": {"lat": 13.747199, "lng": 100.503276},
    "‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏ä‡∏¢": {"lat": 13.743384, "lng": 100.495048},
    "‡∏≠‡∏¥‡∏™‡∏£‡∏†‡∏≤‡∏û": {"lat": 13.747444, "lng": 100.485233},
};

async function detectIntent(userId, text) {
    const sessionId = uuidv4();
    const sessionPath = sessionClient.projectAgentSessionPath(DIALOGFLOW_PROJECT_ID, sessionId);
    const request = {
        session: sessionPath,
        queryInput: { text: { text: text, languageCode: 'th-TH' } },
    };
    try {
        console.log(`Sending to Dialogflow: "${text}"`);
        const responses = await sessionClient.detectIntent(request);
        return responses[0].queryResult;
    } catch (error) {
        console.error('ERROR DETECTING INTENT:', error);
        return null;
    }
}


async function searchGooglePlaces(apiKey, keyword, lat, lng) {
    console.log(`Searching Google (TextSearch) for: ${keyword}`);
    try {
        const response = await googleMapsClient.textSearch({
            params: {
                query: keyword,
                location: { lat, lng },
                radius: 1500,
                language: 'th',
                key: apiKey,
            },
            timeout: 5000,
        });
        console.log('Successfully got response from Google API.');
        return response.data.results || [];
    } catch (e) {
        console.error("Google Maps API (TextSearch) Error:", e.response ? e.response.data : e.message);
        return [];
    }
}

function createShopCarousel(places, apiKey, hasNextPage) {
    if (!places || places.length === 0) {
        return { type: 'text', text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ' };
    }

    const bubbles = places.map(place => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
        if (!place || !place.place_id) {
            return null; // ‡∏Ç‡πâ‡∏≤‡∏° bubble ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }

        const placeId = place.place_id;
        const name = place.name;
        const address = place.vicinity || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà';
        const rating = place.rating ? `‚≠ê ${place.rating.toFixed(1)}` : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô';
        let imageUrl = "https://www. ‡ÆÆ‡Øá‡Æ≤‡Øç-level-seo.com/wp-content/uploads/2019/08/no-image-found.png";
        
        if (place.photos && place.photos.length > 0) {
            const photoReference = place.photos[0].photo_reference;
            imageUrl = `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photoReference}&key=${apiKey}`;
        }
        const gmapsUrl = `https://www.google.com/maps/search/?api=1&query=Google&query_place_id=${placeId}`;

        return {
            type: 'bubble',
            hero: { type: 'image', url: imageUrl, size: 'full', aspectRatio: '20:13', aspectMode: 'cover' },
            body: {
                type: 'box', layout: 'vertical',
                contents: [
                    { type: 'text', text: name, weight: 'bold', size: 'xl', wrap: true },
                    { type: 'box', layout: 'baseline', margin: 'md', contents: [{ type: 'text', text: rating, size: 'sm', color: '#999999', flex: 0 }] },
                    { type: 'text', text: address, wrap: true, size: 'sm', color: '#666666', margin: 'md' }
                ]
            },
            // --- VVVVVV START: ‡∏™‡πà‡∏ß‡∏ô Footer ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î VVVVVV ---
            footer: {
                type: 'box',
                layout: 'vertical',
                spacing: 'md',
                contents: [
                    {
                        type: 'button',
                        style: 'link',
                        height: 'sm',
                        action: {
                            type: 'uri',
                            label: 'üìç ‡∏î‡∏π‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
                            uri: gmapsUrl
                        }
                    },
                    {
                        type: 'box', // ‡πÉ‡∏ä‡πâ box ‡∏Ñ‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
                        layout: 'horizontal',
                        spacing: 'sm',
                        contents: [
                            { // ‡∏õ‡∏∏‡πà‡∏° "‡∏£‡πâ‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡∏î" (‡∏ó‡∏≥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏£‡∏¥‡∏á)
                                type: 'box',
                                layout: 'horizontal',
                                cornerRadius: 'md',
                                backgroundColor: '#FFF0F5', // ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô
                                paddingAll: 'md',
                                justifyContent: 'center',
                                alignItems: 'center',
                                flex: 1, // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
                                action: {
                                    type: 'postback',
                                    label: 'add_favorite', // label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö accessibility
                                    data: `action=add_favorite&shop_id=${placeId}`
                                },
                                contents: [
                                     { type: 'text', text: '‚ù§Ô∏è', flex: 0, margin: 'none', size: 'sm' },
                                     { type: 'text', text: '‡∏£‡πâ‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡∏î', color: '#E83E8C', margin: 'md', weight: 'bold', size: 'sm' }
                                ]
                            },
                            { // ‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á" (‡∏ó‡∏≥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏£‡∏¥‡∏á)
                                type: 'box',
                                layout: 'horizontal',
                                cornerRadius: 'md',
                                borderWidth: '1px',
                                borderColor: '#CCCCCC',
                                paddingAll: 'md',
                                justifyContent: 'center',
                                alignItems: 'center',
                                flex: 1, // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
                                action: {
                                    type: 'postback',
                                    label: 'add_watch_later',
                                    data: `action=add_watch_later&shop_id=${placeId}`
                                },
                                contents: [
                                    { type: 'text', text: 'üîñ', flex: 0, margin: 'none', size: 'sm' },
                                    { type: 'text', text: '‡∏î‡∏π‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á', color: '#555555', margin: 'md', weight: 'bold', size: 'sm' }
                                ]
                            }
                        ]
                    }
                ]
            }
            // --- ^^^^^^ END: ‡∏™‡πà‡∏ß‡∏ô Footer ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ^^^^^^ ---
        };
    }).filter(bubble => bubble !== null); // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤ bubble ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡∏≠‡∏≠‡∏Å

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    if (bubbles.length === 0) {
        return { type: 'text', text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤' };
    }

    if (hasNextPage) {
        const loadMoreBubble = {
            type: 'bubble',
            body: {
                type: 'box',
                layout: 'vertical',
                spacing: 'sm',
                contents: [
                    { type: 'button', flex: 1, gravity: 'center',
                      action: { type: 'postback', label: '‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‚û°Ô∏è', data: 'action=next_page' } }
                ]
            }
        };
        bubbles.push(loadMoreBubble);
    }

    return {
        type: 'flex',
        altText: '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
        contents: { type: 'carousel', contents: bubbles }
    };
};


async function saveOrUpdateUserProfile(profile) {
    if (!profile || !profile.userId) {
        console.error('Cannot save user profile: Invalid profile data received.');
        return;
    }

    const userId = profile.userId;
    const userRef = db.collection('users').doc(userId);

    const userData = {
        line_userId: userId,
        displayName: profile.displayName,
        pictureUrl: profile.pictureUrl,
        statusMessage: profile.statusMessage || null, // ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ status message
        lastUpdatedAt: new Date() // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    };

    try {
        // ‡πÉ‡∏ä‡πâ set ‡πÅ‡∏•‡∏∞ merge:true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        await userRef.set(userData, { merge: true });
        console.log(`Successfully saved/updated profile for user: ${profile.displayName}`);
    } catch (error) {
        console.error(`Failed to save profile for user ${userId}:`, error);
    }
}


// ----- 3. WEBHOOK & LOGIN ENDPOINTS -----
// =========================================================

// --- ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Login (GET request) ---
// ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ LINE Login
app.get('/auth/callback', async (req, res) => {
    const code = req.query.code;
    if (!code) { return res.status(400).send('Error: Authorization code not found.'); }

    try {
        // 1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥ 'code' ‡πÑ‡∏õ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡πá‡∏ô '‡∏ö‡∏±‡∏ï‡∏£‡∏ú‡πà‡∏≤‡∏ô' (Access Token)
        const params = new URLSearchParams();
        params.append('grant_type', 'authorization_code');
        params.append('code', code);
        params.append('redirect_uri', process.env.LINE_LOGIN_CALLBACK_URL);
        params.append('client_id', process.env.LINE_LOGIN_CHANNEL_ID);
        params.append('client_secret', process.env.LINE_LOGIN_CHANNEL_SECRET);

        // 2. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠ '‡∏ö‡∏±‡∏ï‡∏£‡∏ú‡πà‡∏≤‡∏ô'
        const response = await fetch('https://api.line.me/oauth2/v2.1/token', {
            method: 'POST',
            body: params
        });
        const tokenData = await response.json();
        
        if (tokenData.error) throw new Error(tokenData.error_description);
        
        const accessToken = tokenData.access_token;

        // 3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ '‡∏ö‡∏±‡∏ï‡∏£‡∏ú‡πà‡∏≤‡∏ô' ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡∏ô‡∏≥‡πÑ‡∏õ‡∏Ç‡∏≠ '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'
        const profileResponse = await fetch('https://api.line.me/v2/profile', {
            headers: { 'Authorization': `Bearer ${accessToken}` },
        });
        const profile = await profileResponse.json();

        // 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await saveOrUpdateUserProfile(profile);

        // 5. ‡∏™‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        res.send('<h1>‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h1><p>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ó LINE ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢</p>');

    } catch (error) {
        console.error('Error in LINE Login callback:', error);
        res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    }
});


// --- ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏Ñ‡∏∏‡∏¢ (POST request) ---
// ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå LINE ‡∏à‡∏∞‡∏™‡πà‡∏á Event ‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, follow) ‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
app.post('/callback', line.middleware(config), (req, res) => {
    Promise
        .all(req.body.events.map(handleEvent))
        .then((result) => res.json(result))
        .catch((err) => { console.error(err); res.status(500).end(); });
});

// ----- 4. EVENT HANDLER -----
const handleEvent = async (event) => {
    const userId = event.source.userId;

        // --- ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Event 'follow' ---
    if (event.type === 'follow') {
        const userId = event.source.userId;
        try {
            // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å LINE Messaging API
            const profile = await client.getProfile(userId);
            
            // 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await saveOrUpdateUserProfile(profile);

            // 3. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö (‡∏à‡∏∞‡πÉ‡∏™‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ)
            return client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞‡∏Ñ‡∏∏‡∏ì ${profile.displayName}! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞`
            });
            
        } catch (error) {
            console.error('Error handling follow event:', error);
        }
        return Promise.resolve(null);
    }

    if (event.type === 'postback') {
        const data = event.postback.data;
        const params = new URLSearchParams(data);
        const action = params.get('action');
        
        if (action === 'add_favorite' || action === 'add_watch_later') {
            const shopId = params.get('shop_id');
            const collectionName = action === 'add_favorite' ? 'favorites' : 'watch_later';
            const replyText = action === 'add_favorite' ? '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‚ù§Ô∏è' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏î‡∏π‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üîñ';
            
            const docRef = db.collection('users').doc(userId).collection(collectionName).doc(shopId);
            await docRef.set({ addedAt: new Date() });
            return client.replyMessage(event.replyToken, { type: 'text', text: replyText });
        } 
        
        // --- **‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ** ---
        else if (action === 'next_page') {
            const userStateRef = db.collection('users').doc(userId);
            const userDoc = await userStateRef.get();
            
            // --- VVVVVV START: ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç VVVVVV ---
            // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            if (!userDoc.exists || !userDoc.data().currentSearch) {
                return client.replyMessage(event.replyToken, { type: 'text', text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞' });
            }

            const currentSearch = userDoc.data().currentSearch;
            const currentPage = currentSearch.currentPage || 1; // ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            const startIndex = currentPage * 5;
            
            if (startIndex >= currentSearch.placeIds.length) {
                 return client.replyMessage(event.replyToken, { type: 'text', text: '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞' });
            }
            
            const nextPlaceIds = currentSearch.placeIds.slice(startIndex, startIndex + 5);

            if (nextPlaceIds.length === 0) {
                return client.replyMessage(event.replyToken, { type: 'text', text: '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞' });
            }

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• shop ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å Firestore
            const shopPromises = nextPlaceIds.map(id => db.collection('shops').doc(id).get());
            const shopDocs = await Promise.all(shopPromises);
            const placesToShow = shopDocs
                .filter(doc => doc.exists)
                .map(doc => doc.data()); // ‡πÉ‡∏ä‡πâ .data() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ object ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

            const hasNextPage = currentSearch.placeIds.length > startIndex + 5;
            const replyMessageObject = createShopCarousel(placesToShow, process.env.GOOGLE_API_KEY, hasNextPage);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï page ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            await userStateRef.update({ 'currentSearch.currentPage': currentPage + 1 });
            // --- ^^^^^^ END: ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ^^^^^^ ---

            return client.replyMessage(event.replyToken, replyMessageObject);
        }
    }

    if (event.type !== 'message' || event.message.type !== 'text') {
       if (event.type !== 'follow') {
            return Promise.resolve(null);
        }
    }
    
    const textFromUser = event.message.text.trim();
    const dfResult = await detectIntent(userId, textFromUser);

    if (dfResult && dfResult.intent && dfResult.intent.displayName === 'FindPlaces') {
        const params = dfResult.parameters.fields;
        const cuisine = params.cuisine ? params.cuisine.stringValue : '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£';
        const station = params.mrt_station ? params.mrt_station.stringValue : '';

        if (dfResult.fulfillmentText && !dfResult.allRequiredParamsPresent) {
            return client.replyMessage(event.replyToken, { type: 'text', text: dfResult.fulfillmentText });
        }

        if (station && MRT_BLUE_LINE_STATIONS[station]) {
            const stationInfo = MRT_BLUE_LINE_STATIONS[station];
            const fullSearchQuery = `${cuisine} ${station}`;
            const allPlaces = await searchGooglePlaces(process.env.GOOGLE_API_KEY, fullSearchQuery, stationInfo.lat, stationInfo.lng);
            
            if (allPlaces && allPlaces.length > 0) {
                const batch = db.batch();
                allPlaces.forEach(place => {
                    const shopRef = db.collection('shops').doc(place.place_id);
                    // --- VVVVVV START: ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç VVVVVV ---
                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á Firestore
                    batch.set(shopRef, {
                        place_id: place.place_id, // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
                        name: place.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
                        vicinity: place.vicinity || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
                        rating: place.rating || null,
                        photos: place.photos || null // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                    }, { merge: true });
                    // --- ^^^^^^ END: ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ^^^^^^ ---
                });
                await batch.commit();

                const placeIds = allPlaces.map(place => place.place_id);
                const userStateRef = db.collection('users').doc(userId);
                await userStateRef.set({
                    currentSearch: {
                        query: fullSearchQuery,
                        placeIds: placeIds,
                        currentPage: 1
                    }
                }, { merge: true });
                console.log(`Cached/Updated ${allPlaces.length} shops and user state.`);
            }
            
            const placesToShow = allPlaces.slice(0, 5);
            const hasNextPage = allPlaces.length > 5;
            const replyMessageObject = createShopCarousel(placesToShow, process.env.GOOGLE_API_KEY, hasNextPage);
            
            return client.replyMessage(event.replyToken, replyMessageObject);
        } else {
             return client.replyMessage(event.replyToken, { type: 'text', text: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ ${station || '‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏'}` });
        }
    }
    
    if (dfResult && dfResult.fulfillmentText) {
        return client.replyMessage(event.replyToken, { type: 'text', text: dfResult.fulfillmentText });
    } else {
        return client.replyMessage(event.replyToken, { type: 'text', text: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞" });
    }
};

// ----- 5. START SERVER -----
const port = process.env.PORT || 10000;
app.listen(port, '0.0.0.0', () => {
    console.log(`listening on ${port}`);
});